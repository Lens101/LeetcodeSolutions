class Solution {
    public int[] twoSum(int[] nums, int target) {
        
        Map<Integer, Integer> numMaps=new HashMap<>();  //Hashmap datatype
        
        for(int i =0; i < nums.length;i++){
            
            int x = target - nums[i];
            
            if(numMaps.containsKey(x)){ //if numMaps current position has 'x' value
                return new int[]{numMaps.get(x), i};    //get positions and return.
                
            }
            numMaps.put(nums[i],i);     //Use forloop = to iteratively add to hashmap.
        }    
        
        throw new IllegalArgumentException("no match found");
    }
}

//Hashmap used for constant lookup time O(n).

//testcase: [2,7,11,15], target = 9
